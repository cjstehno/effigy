{"name":"Effigy","tagline":"Groovy annotation-driven JDBC simplification framework - CRUD without the crap.","body":"\r\n# Effigy\r\n\r\n> WARNING: this project is not ready for general use yet\r\n\r\n## Introduction\r\n\r\n> Effigy: 1. a sculpture or model of a person. 2. a roughly made model of a particular person, made in order to be damaged or destroyed as a\r\nprotest or expression of anger\r\n\r\nYou can decide which definition above fits with your standard data-access experience.\r\n\r\nEffigy is an annotation-driven simplification of JDBC that sits on top of the Spring JDBC library and allows a developer\r\nto quickly develop data-access code for standard use cases, based on standard coding patterns.\r\n\r\nEffigy is NOT a full-blown ORM.\r\n\r\nEffigy is inspired by JPA and Spring-Data JPA and the desire to have similar functionality with simple JDBC-based projects.\r\n\r\n## Build\r\n\r\nEffigy uses Gradle, so just run:\r\n\r\n    gradlew build\r\n\r\n## User Guide\r\n\r\nThe User Guide is built using [Gaiden](http://kobo.github.io/gaiden), separate from the standard Gradle build. If you want to generate the User Guide\r\nrun the following in the `effigy-guide` directory:\r\n\r\n    gaidenw build\r\n\r\nThe `effigy-guide/build` directory will contain the generated guide.\r\n\r\n\r\n**Site:** http://cjstehno.github.io/effigy\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}